googleSheetList = require("../saves/googleJSON/exercisesGoogle.json");
googleSheetHistoryCaf = require("../saves/googleJSON/cafGoogle.json");
googleSheetHistoryGjf = require("../saves/googleJSON/gjfGoogle.json");
googleSheetHistoryJonny = require("../saves/googleJSON/jonnyGoogle.json");
googleSheetHistoryMuch = require("../saves/googleJSON/muchGoogle.json");
googleSheetHistoryPhilipp = require("../saves/googleJSON/philippGoogle.json");
googleSheetHistoryLisi = require("../saves/googleJSON/lisiGoogle.json");


updateRegisteredPlayers(updateRegisteredPlayersResult) {
        for (var playerName in this.registeredPlayers) {
            this.registeredPlayers[playerName] = 0;
        }
        for (var historyDate in this.history) {
            for (var playerEntry = 0; playerEntry < this.history[historyDate].playerName.length; playerEntry++) {
                this.registeredPlayers[this.history[historyDate].playerName[playerEntry]]++;
            }
        }

        this.needsUpload.registeredPlayers = true;
        updateRegisteredPlayersResult("registered Players updated from history");
    }

    recalculateAllExercisesWithHistory(result) {
        for (var id in this.exerciseList) {
            this.recalculateExercise(id, this.exerciseList[id].name, function (result) {

            });

        }
        this.calculateHistoryDailyMax();
        result("recalculated all exercises with history + dailyMax");

        setTimeout(function () {
            this.needsUpload.history = true;
            this.needsUpload.exerciseList = true;
        }.bind(this), 10);
    }

    //this.importGoogleSheetStuff(function (result) {
        //    logFile.log(result,false,0);
        //}.bind(this));

    importGoogleSheetStuff(result) {
        this.importExercisesFromGoogle(function (resultEx) {
            logFile.log(resultEx, false, 0);
            this.importHistoryFromGoogle(function (resultHistory) {
                logFile.log(resultHistory, false, 0);
                result("GoogleSheet Stuff loaded");
            }.bind(this));

        }.bind(this));
    }

    importExercisesFromGoogle(result) {
        var usesWeight = false;
        for (var entryNo in googleSheetList.JSONExportÜbungen) {
            var entry = googleSheetList.JSONExportÜbungen[entryNo];
            if (entry.exname == undefined || entry.diff == undefined) {
                continue;
            }
            if (entry.baseWeight > 0) {
                usesWeight = true;
            }
            else {
                usesWeight = false;
            }
            var exercise = new Exercise(
                entry.exname,
                entry.diff,
                entry.diff,
                entry.diff,
                entry.equip,
                usesWeight,
                entry.baseWeight,
                entry.exname + " Import from GS",
                "caf",
                entry.type,
                entry.unit,
                entry.bothSides
            );

            var achievementActive = false;
            var repsToGetOverall;
            var repsToGetDaily;
            var repsToGetMonthly;
            var achievementCategory;
            var achievementText;
            try {
                repsToGetOverall = entry.repsToGetOverall.split(";").map(Number);
                achievementActive = true;
            }
            catch (err) {
                repsToGetOverall = [0];
            }
            try {
                repsToGetDaily = entry.repsToGetDaily.split(";").map(Number);
                achievementActive = true;
            }
            catch (err) {
                repsToGetDaily = [0];
            }
            try {
                repsToGetMonthly = entry.repsToGetMonthly.split(";").map(Number);
                achievementActive = true;
            }
            catch (err) {
                repsToGetMonthly = [0];
            }
            try {
                achievementCategory = entry.achievementCategory;
                if (achievementCategory == undefined) {
                    achievementCategory = entry.exname;
                }
            }
            catch (err) {
                achievementCategory = entry.exname;
            }
            try {
                achievementText = entry.achievementText;
                if (achievementText == undefined) {
                    achievementText = "";
                }
            }
            catch (err) {
                achievementText = "";
            }
            exercise.achievementInfo.achievementActive = achievementActive;
            exercise.achievementInfo.repsToGetOverall = repsToGetOverall;
            exercise.achievementInfo.repsToGetDaily = repsToGetDaily;
            exercise.achievementInfo.repsToGetMonthly = repsToGetMonthly;
            exercise.achievementInfo.achievementCategory = achievementCategory;
            exercise.achievementInfo.textDaily = achievementText;
            exercise.achievementInfo.textMonthly = achievementText;
            exercise.achievementInfo.textOverall = achievementText;

            this.addExercise(exercise);
        }
        result("Exercises from JSON imported.");

    }

    importHistoryFromGoogle(result) {
        var historyData = [googleSheetHistoryCaf, googleSheetHistoryGjf, googleSheetHistoryJonny, googleSheetHistoryMuch, googleSheetHistoryPhilipp, googleSheetHistoryLisi];
        var nameData = ["caf", "gjf", "jonny", "much", "philipp", "lisi"];
        var date;
        var id;
        for (var i = 0; i < historyData.length; i++) {
            for (var dayEntryNo in historyData[i].JSONExportHistory) {
                var dayEntry = historyData[i].JSONExportHistory[dayEntryNo];
                date = calc.createZeroDate(dayEntry.Datum);
                for (var dayEntryKeyName in dayEntry) {
                    var dayEntryKeyValue = dayEntry[dayEntryKeyName];
                    var exerciseId = this.existExerciseName(dayEntryKeyName);
                    if (exerciseId > 0) {
                        id = Math.random().toFixed(16).slice(2);
                        var weight = this.exerciseList[exerciseId].baseWeight;
                        this.addToHistory(id, nameData[i], exerciseId, weight, dayEntryKeyValue, date);
                    }
                    else {
                        if (dayEntryKeyName != "Datum") {
                            logFile.log(dayEntry, false, 0);
                            logFile.log(dayEntryKeyValue, false, 0);
                            logFile.log(dayEntryKeyName, false, 0);
                        }
                    }
                }
            }
        }
        for (var nameIterator = 0; nameIterator < nameData.length; nameIterator++) {
            this.calculatePointsFromHistory(nameData[nameIterator]);
        }

        result("Histories from JSON imported.");
    }

        recalculateExercise(id, exName, result) {
        var sumPoints = 0;
        var currentCount = 0;
        var currentWeight = 0;
        var currentName;
        var points;
        var pointsPerPlayer = {};
        var repsPerPlayer = {};

        for (var historyDate in this.history) {
            var historyEntry = this.history[historyDate];
            for (var historyIterator = 0; historyIterator < historyEntry.exerciseId.length; historyIterator++) {
                if (historyEntry.exerciseId[historyIterator] != id) {
                    continue;
                }
                currentWeight = historyEntry.weight[historyIterator];
                currentCount = historyEntry.count[historyIterator];
                currentName = historyEntry.playerName[historyIterator];
                if (config.RECALCULATE_HISTORY_ON_CHANGES) {
                    points = calc.calculatePoints(this.exerciseList[historyEntry.exerciseId[historyIterator]], currentWeight, currentCount);
                    historyEntry.points[historyIterator] = points;
                }
                else {
                    points = historyEntry.points[historyIterator];
                }

                historyEntry.exName[historyIterator] = exName;
                sumPoints += Number(points);


                if (repsPerPlayer[currentName] == undefined) {
                    repsPerPlayer[currentName] = currentCount;
                }
                else {
                    repsPerPlayer[currentName] += currentCount;
                }

                if (pointsPerPlayer[currentName] == undefined) {
                    pointsPerPlayer[currentName] = points;
                }
                else {
                    pointsPerPlayer[currentName] += points;
                }

                continue;
            }

        }
        this.exerciseList[id].points = sumPoints;
        this.exerciseList[id].repsPerPlayer = repsPerPlayer;
        this.exerciseList[id].pointsPerPlayer = pointsPerPlayer;
        return result("recalculate all Exercises " + exName + " done");


    }

    existExercise(name, equipment) {
        for (var i in this.exerciseList) {
            var exercise = this.exerciseList[i];
            if (exercise.name === name && exercise.equipment === equipment) {
                return exercise.id;
            }
        }
        return 0;
    }

    existExerciseName(name) {
        for (var i in this.exerciseList) {
            var exercise = this.exerciseList[i];
            if (exercise.name === name) {
                return exercise.id;
            }
        }
        return 0;
    }

        checkDailyWinner(date) {
        var max = 100;
        var dailyWinner = "Keiner";

        if (this.history[date].dailyWinner == undefined) {
            this.history[date].dailyWinner = dailyWinner;
        }
        for (var playerName in this.history[date].dailySum) {
            if (this.history[date].dailySum[playerName] > max) {
                max = this.history[date].dailySum[playerName];
                dailyWinner = playerName;
            }
        }

        if (this.history[date].dailyWinner != dailyWinner) {
            var lastWinner = this.history[date].dailyWinner;

            this.history[date].dailyWinner = dailyWinner;
            if (this.dailyWins[dailyWinner] != undefined) {
                this.dailyWins[dailyWinner]++;
                this.dailyWins[lastWinner]--;
                if (dailyWinner != "Keiner") {
                    this.addToEventLog(dailyWinner + " hat mit " + max + " Punkten den Tagessieg, bis jetzt!");
                }

            }
            else {
                this.dailyWins[dailyWinner] = 1;
                this.dailyWins[lastWinner]--;
                if (dailyWinner != "Keiner") {
                    this.addToEventLog(dailyWinner + " hat mit " + max + " Punkten den Tagessieg, bis jetzt!");
                }
            }
        }




        return "daily Winner of date " + date + " calculated";

    }

    calculatePointsFromHistory(name, toDateNotIncluding) {
        if (toDateNotIncluding == "") {
            toDateNotIncluding = calc.createZeroDate("9999-01-01");
        }
        else {
            toDateNotIncluding = calc.createZeroDate(toDateNotIncluding);
        }

        var sumPoints5Days = 0;
        var sumPointsToday = 0;
        var sumPointsNegative = 0;
        var sumPointsTotal = 0;
        var sumPointsThisMonth = 0;
        var sumPointsLastMonth = 0;
        var sumPointsCardio = 0;
        var sumPointsStrength = 0;
        var thisMonthEntries = 0;
        var thisYear = calc.createZeroDate().getFullYear();
        var todayDate = calc.createZeroDate();
        todayDate.setMonth(todayDate.getMonth() - 1);
        var lastMonth = todayDate.getMonth();
        var lastMonthYear = todayDate.getFullYear();
        var thisMonth = calc.createZeroDate().getMonth();
        var dateMinus5Days = calc.createZeroDate();
        var dailyMax = 0;
        var monthlyMax = 0;
        var resultingMaxPerDay = 0;
        var resultingMaxPerMonth = 0;
        var currentMonth;
        var currentYear;
        todayDate = calc.createZeroDate();
        dateMinus5Days.setDate(dateMinus5Days.getDate() - 5);
        for (var dates in this.history) {
            var currentDate = calc.createZeroDate(dates);
            currentDate = calc.createZeroDate(dates);

            if (currentDate.getMonth() > currentMonth && currentDate.getFullYear() >= currentYear ||
                currentDate.getMonth() == currentMonth && currentDate.getFullYear() > currentYear ||
                currentDate.getMonth() < currentMonth && currentDate.getFullYear() > currentYear) {
                monthlyMax = 0;
            }

            currentMonth = currentDate.getMonth();
            currentYear = currentDate.getFullYear();

            if (currentDate >= toDateNotIncluding) {
                continue;
            }
            var historyEntry = this.history[dates];
            dailyMax = 0;
            for (var iterator in historyEntry.playerName) {
                var historyName = historyEntry.playerName[iterator];
                var exerciseId = historyEntry.exerciseId[iterator];
                if (historyName.toUpperCase() === name.toUpperCase()) {
                    if (this.exerciseList[exerciseId].type === "Cardio") {
                        sumPointsCardio += Number(historyEntry.points[iterator]);
                    }
                    else if (this.exerciseList[exerciseId].type === "Kraft") {
                        sumPointsStrength += Number(historyEntry.points[iterator]);
                    }
                    sumPointsTotal += Number(historyEntry.points[iterator]);
                    dailyMax += Number(historyEntry.points[iterator]);
                    monthlyMax += Number(historyEntry.points[iterator]);
                    if (currentDate > dateMinus5Days) {
                        sumPoints5Days += Number(historyEntry.points[iterator]);
                    }
                    if (currentDate.getDate() == todayDate.getDate() && currentDate.getMonth() == todayDate.getMonth() && currentDate.getFullYear() == todayDate.getFullYear()) {
                        sumPointsToday += Number(historyEntry.points[iterator]);
                    }
                    if (Number(historyEntry.points[iterator]) < 0) {
                        sumPointsNegative += Math.abs(Number(historyEntry.points[iterator]));
                    }
                    if (currentDate.getMonth() == thisMonth && currentDate.getFullYear() == thisYear) {
                        sumPointsThisMonth += Number(historyEntry.points[iterator]);
                        thisMonthEntries++;
                    }
                    if (currentDate.getMonth() == lastMonth && currentDate.getFullYear() == lastMonthYear) {
                        sumPointsLastMonth += Number(historyEntry.points[iterator]);
                    }
                }
            }
            if (dailyMax > resultingMaxPerDay) {
                resultingMaxPerDay = dailyMax;
            }
            if (monthlyMax > resultingMaxPerMonth) {
                resultingMaxPerMonth = monthlyMax;
            }
        }
        var averageThisMonth = 0;
        if (thisMonthEntries > 0) {
            averageThisMonth = sumPointsThisMonth / thisMonthEntries;
        }
        var points = {
            total: sumPointsTotal,
            cardio: sumPointsCardio,
            strength: sumPointsStrength,
            negative: sumPointsNegative,
            today: sumPointsToday,
            diffLastMonth: sumPointsLastMonth - sumPointsThisMonth,
            last5Days: sumPoints5Days,
            thisMonth: sumPointsThisMonth,
            dailyMax: resultingMaxPerDay,
            monthlyMax: resultingMaxPerMonth,
            averageThisMonth: averageThisMonth,
        };

        return points;



    }

    calculateHistoryDailyMax() {
        var dailySum = {};
        this.dailyWins = {};
        for (var historyDate in this.history) {
            var historyEntry = this.history[historyDate];
            for (var historyIterator = 0; historyIterator < historyEntry.exerciseId.length; historyIterator++) {
                if (dailySum[historyEntry.playerName[historyIterator]] == undefined) {
                    dailySum[historyEntry.playerName[historyIterator]] = historyEntry.points[historyIterator];
                }
                else {
                    dailySum[historyEntry.playerName[historyIterator]] += historyEntry.points[historyIterator];
                }

            }
            this.history[historyDate].dailySum = dailySum;

            var max = 100;
            var dailyWinner = "Keiner";
            for (var playerName in this.history[historyDate].dailySum) {
                if (this.history[historyDate].dailySum[playerName] > max) {
                    max = this.history[historyDate].dailySum[playerName];
                    dailyWinner = playerName;
                }
            }

            this.history[historyDate].dailyWinner = dailyWinner;
            if (this.dailyWins[dailyWinner] != undefined) {
                this.dailyWins[dailyWinner]++;
            }
            else {
                this.dailyWins[dailyWinner] = 1;
            }
            dailySum = {};
        }

        for (var regPlayerName in this.registeredPlayers) {
            if (this.dailyWins[regPlayerName] == undefined) {
                this.dailyWins[regPlayerName] = 0;
            }
        }

    }

    getMaxExerciseCounts(exId, playerName, ignoreCategory) {
        let start = Date.now();
        var sumMonthly = 0;
        var sumDaily = 0;
        var sumOverall = 0;
        var exCat;
        if (ignoreCategory) {
            exCat = undefined;
        }
        else {
            exCat = this.exerciseList[exId].achievementInfo.achievementCategory;
        }
        var maxSumMonthly = 0;
        var maxSumDaily = 0;

        var historyChunk = this.getDefinedHistory("1970-01-01", "9999-01-01");
        if (historyChunk.length == 0) {
            return 0;
        }
        var currentDate = calc.createZeroDate(historyChunk[0].date[0]);
        for (var historyIterator = 0; historyIterator < historyChunk.length; historyIterator++) {
            sumDaily = 0;
            var newDate = calc.createZeroDate(historyChunk[historyIterator].date[0]);
            if (currentDate < newDate && ((currentDate.getMonth() < newDate.getMonth()) || (currentDate.getMonth() > newDate.getMonth() && currentDate.getFullYear() < newDate.getFullYear()))) {
                //new Month
                currentDate = calc.createZeroDate(historyChunk[historyIterator].date[0]);
                sumMonthly = 0;
            }
            var historyEntry = historyChunk[historyIterator];
            for (var entryIterator in historyEntry.playerName) {
                var currentCategory = this.exerciseList[historyEntry.exerciseId[entryIterator]].achievementInfo.achievementCategory;
                if ((historyEntry.playerName[entryIterator].toUpperCase() === playerName.toUpperCase() && historyEntry.exerciseId[entryIterator] == exId) ||
                    (historyEntry.playerName[entryIterator].toUpperCase() === playerName.toUpperCase() && currentCategory == exCat)) {
                    sumMonthly += Number(historyEntry.count[entryIterator]);
                    sumDaily += Number(historyEntry.count[entryIterator]);
                    sumOverall += Number(historyEntry.count[entryIterator]);
                }
                else {
                    continue;
                }

            }
            if (sumMonthly > maxSumMonthly) {
                maxSumMonthly = sumMonthly;
            }
            if (sumDaily > maxSumDaily) {
                maxSumDaily = sumDaily;
            }

        }
        var sum = {
            daily: maxSumDaily,
            monthly: maxSumMonthly,
            overall: sumOverall
        };
        let end = Date.now();
        logFile.log(`getMaxExerciseCounts done in ${end - start}`, false, 0);
        return sum;
    }

    getPlayerList(playerList, result) {
        let start = Date.now();
        var returnList = {};
        for (let idPlayer in playerList) {
            returnList[playerList[idPlayer].name] = this.registeredPlayers[playerList[idPlayer].name].points;
            returnList[playerList[idPlayer].name].online = true;
        }
        for (let name in this.registeredPlayers) {
            if (returnList[name] != undefined) {
                continue;
            }
            else {
                returnList[name] = this.registeredPlayers[name].points;
                returnList[name].online = false;
            }
        }
        let end = Date.now();
        logFile.log(`getPlayerList done in ${end - start} ms`, false, 0);
        result(returnList);
    }

        updateSingleStats(options, updateSingleStatsResult) {
        let start = Date.now();
        /*
            options = {
                date:date,
                playerName:name,
                points:points,
                pointsCardio:pointsCardio,
                pointsStrength:pointsStrength,
                exerciseCount:count,
                exerciseId:id,
                exerciseCategory:cat,
                isCardio:false,
                isStrength:false,
                isDeletion:false,
            }

        */
        let dateInfo = common.getDateInfo(options.date);

        if (this.monthlyData[dateInfo.currentMonthName] == undefined) {
            this.monthlyData[dateInfo.currentMonthName] = {};
            for (let playerName in this.registeredPlayers) {
                if (playerName === options.playerName) {
                    this.monthlyData[dateInfo.currentMonthName][options.playerName] = Number(options.points);
                }
                else {
                    this.monthlyData[dateInfo.currentMonthName][options.playerName] = 0;
                }
            }
        }
        else {
            this.monthlyData[dateInfo.currentMonthName][options.playerName] += Number(options.points);
        }

        if (options.isCardio) {
            if (this.monthlyCardioData[dateInfo.currentMonthName] == undefined) {
                this.monthlyCardioData[dateInfo.currentMonthName] = {};
                for (let playerName in this.registeredPlayers) {
                    if (playerName === options.playerName) {
                        this.monthlyCardioData[dateInfo.currentMonthName][options.playerName] = options.pointsCardio;
                    }
                    else {
                        this.monthlyCardioData[dateInfo.currentMonthName][options.playerName] = 0;
                    }
                }
            }
            else {
                this.monthlyCardioData[dateInfo.currentMonthName][options.playerName] += Number(options.points);
            }
        }

        if (options.isStrength) {
            if (this.monthlyStrengthData[dateInfo.currentMonthName] == undefined) {
                this.monthlyStrengthData[dateInfo.currentMonthName] = {};
                for (let playerName in this.registeredPlayers) {
                    if (playerName === options.playerName) {
                        this.monthlyStrengthData[dateInfo.currentMonthName][options.playerName] = options.pointsStrength;
                    }
                    else {
                        this.monthlyStrengthData[dateInfo.currentMonthName][options.playerName] = 0;
                    }
                }
            }
            else {
                this.monthlyStrengthData[dateInfo.currentMonthName][options.playerName] += Number(options.points);
            }
        }

        if (this.monthlyDataExercise[dateInfo.currentMonthName] == undefined) {
            let newData = {};
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            newData[options.exerciseId] = newPlayerData;
            this.monthlyDataExercise[dateInfo.currentMonthName] = newData;
        }
        else if (this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId] == undefined) {
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId] = newPlayerData;
        }
        else if (this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId][options.playerName] == undefined) {
            this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId][options.playerName] = Number(options.exerciseCount);
        }
        else {
            this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId][options.playerName] += Number(options.exerciseCount);
        }

        if (this.monthlyDataExerciseCategory[dateInfo.currentMonthName] == undefined) {
            let newData = {};
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            newData[options.exerciseCategory] = newPlayerData;
            this.monthlyDataExerciseCategory[dateInfo.currentMonthName] = newData;
        }
        else if (this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory] == undefined) {
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory] = newPlayerData;
        }
        else if (this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory][options.playerName] == undefined) {
            this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory][options.playerName] = Number(options.exerciseCount);
        }
        else {
            this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory][options.playerName] += Number(options.exerciseCount);
        }


        //DAILY
        if (this.dailyDataExercise[dateInfo.historyDateString] == undefined) {
            let newData = {};
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            newData[options.exerciseId] = newPlayerData;
            this.dailyDataExercise[dateInfo.historyDateString] = newData;
        }
        else if (this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId] == undefined) {
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId] = newPlayerData;
        }
        else if (this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId][options.playerName] == undefined) {
            this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId][options.playerName] = Number(options.exerciseCount);
        }
        else {
            this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId][options.playerName] += Number(options.exerciseCount);
        }

        if (this.dailyDataExerciseCategory[dateInfo.historyDateString] == undefined) {
            let newData = {};
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            newData[options.exerciseCategory] = newPlayerData;
            this.dailyDataExerciseCategory[dateInfo.historyDateString] = newData;
        }
        else if (this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory] == undefined) {
            let newPlayerData = {};
            newPlayerData[options.playerName] = Number(options.exerciseCount);
            this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory] = newPlayerData;
        }
        else if (this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory][options.playerName] == undefined) {
            this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory][options.playerName] = Number(options.exerciseCount);
        }
        else {
            this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory][options.playerName] += Number(options.exerciseCount);
        }




        //POINTS REG PLAYERS
        if (options.isDeletion) {
            this.registeredPlayers[options.playerName].entries--;
        }
        else if (options.isNewEntry) {
            this.registeredPlayers[options.playerName].entries++;
        }

        this.registeredPlayers[options.playerName].points.total += Number(options.points);

        if (options.isCardio) {
            this.registeredPlayers[options.playerName].points.cardio += Number(options.points);
        }

        if (options.isStrength) {
            this.registeredPlayers[options.playerName].points.strength += Number(options.points);
        }
        this.registeredPlayers[options.playerName].points.cardioStrengthRatio = calc.calculateCardioStrengthPercents(this.registeredPlayers[options.playerName].points.cardio, this.registeredPlayers[options.playerName].points.strength);
        if (options.isNegative) {
            this.registeredPlayers[options.playerName].points.negative += Number(options.points);
        }

        if (dateInfo.isToday) {
            this.registeredPlayers[options.playerName].points.today += Number(options.points);
        }

        if (dateInfo.isThisMonth) {
            this.registeredPlayers[options.playerName].points.thisMonth += Number(options.points);
            this.registeredPlayers[options.playerName].points.diffLastMonth -= Number(options.points);
            this.registeredPlayers[options.playerName].points.averageThisMonth = this.registeredPlayers[options.playerName].points.thisMonth / Number(dateInfo.day);
        }


        if (dateInfo.isLast5Days) {
            this.registeredPlayers[options.playerName].points.last5Days += Number(options.points);
        }







        let found = false;

        let dailyMax = 0;
        try {
            for (let graphIterator = 0; graphIterator < this.fullGraph[options.playerName].yAxis.length; graphIterator++) {
                if (this.fullGraph[options.playerName].yAxis[graphIterator] == dateInfo.historyDateString) {
                    found = true;
                    this.fullGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    if (options.isCardio) {
                        this.fullCardioGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }
                    if (options.isStrength) {
                        this.fullStrengthGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }

                    this.fullDailyResetGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    if (options.isCardio) {
                        this.fullDailyResetCardioGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }
                    if (options.isStrength) {
                        this.fullDailyResetStrengthGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }

                    if (this.fullDailyResetGraph[options.playerName].xAxis[graphIterator] > dailyMax) {
                        dailyMax = this.fullDailyResetGraph[options.playerName].xAxis[graphIterator];
                    }
                    continue;
                }
                if (found) {
                    this.fullGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    if (options.isCardio) {
                        this.fullCardioGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }
                    if (options.isStrength) {
                        this.fullStrengthGraph[options.playerName].xAxis[graphIterator] += Number(options.points);
                    }
                }

                if (this.fullDailyResetGraph[options.playerName].xAxis[graphIterator] > dailyMax) {
                    dailyMax = this.fullDailyResetGraph[options.playerName].xAxis[graphIterator];
                }


            }
        }
        catch (e) {
            logFile.log("no graph available - skipped in 'updateSingleStats'", false, 0);
        }




        // DAILY WINS
        let max = 100;
        var dailyWinner = "Keiner";
        for (let playerName in this.registeredPlayers) {
            if (this.history[dateInfo.historyDateString].dailySum[playerName] != undefined) {
                if (this.history[dateInfo.historyDateString].dailySum[playerName] > max) {
                    max = this.history[dateInfo.historyDateString].dailySum[playerName];
                    dailyWinner = playerName;
                }
            }
            else {
                this.history[dateInfo.historyDateString].dailySum[playerName] = 0;
            }

            if (!found) {
                if (this.fullGraph[playerName] == undefined) {
                    this.fullGraph[playerName] = {};
                    this.fullCardioGraph[playerName] = {};
                    this.fullStrengthGraph[playerName] = {};
                    this.fullDailyResetGraph[playerName] = {};
                    this.fullDailyResetCardioGraph[playerName] = {};
                    this.fullDailyResetStrengthGraph[playerName] = {};
                }
                if (this.fullGraph[playerName].xAxis == undefined) {
                    this.fullGraph[playerName].xAxis = [];
                    this.fullGraph[playerName].yAxis = [];

                    this.fullCardioGraph[playerName].xAxis = [];
                    this.fullCardioGraph[playerName].yAxis = [];

                    this.fullStrengthGraph[playerName].xAxis = [];
                    this.fullStrengthGraph[playerName].yAxis = [];

                    this.fullDailyResetGraph[playerName].xAxis = [];
                    this.fullDailyResetGraph[playerName].yAxis = [];

                    this.fullDailyResetCardioGraph[playerName].xAxis = [];
                    this.fullDailyResetCardioGraph[playerName].yAxis = [];

                    this.fullDailyResetStrengthGraph[playerName].xAxis = [];
                    this.fullDailyResetStrengthGraph[playerName].yAxis = [];

                    this.fullGraph[playerName].xAxis.push(this.registeredPlayers[playerName].points.total);
                    this.fullGraph[playerName].yAxis.push(dateInfo.historyDateString);

                    this.fullCardioGraph[playerName].xAxis.push(this.registeredPlayers[playerName].points.cardio);
                    this.fullCardioGraph[playerName].yAxis.push(dateInfo.historyDateString);

                    this.fullStrengthGraph[playerName].xAxis.push(this.registeredPlayers[playerName].points.strength);
                    this.fullStrengthGraph[playerName].yAxis.push(dateInfo.historyDateString);

                    this.fullDailyResetGraph[playerName].xAxis.push(Number(options.points));
                    this.fullDailyResetGraph[playerName].yAxis.push(dateInfo.historyDateString);

                    this.fullDailyResetCardioGraph[playerName].xAxis.push(Number(options.pointsCardio));
                    this.fullDailyResetCardioGraph[playerName].yAxis.push(dateInfo.historyDateString);

                    this.fullDailyResetStrengthGraph[playerName].xAxis.push(Number(options.pointsStrength));
                    this.fullDailyResetStrengthGraph[playerName].yAxis.push(dateInfo.historyDateString);
                }




                if (this.fullDailyResetGraph[playerName].xAxis[this.fullDailyResetGraph[playerName].xAxis.length - 1] > dailyMax && options.playerName == playerName) {
                    dailyMax = Number(options.points);
                }

            }

        }

        let monthlyMax = 0;
        for (let monthName in this.monthlyData) {
            let data = this.monthlyData[monthName];
            if (data[options.playerName] > monthlyMax) {
                monthlyMax = data[options.playerName];
            }
        }
        this.registeredPlayers[options.playerName].points.dailyMax = dailyMax;
        this.registeredPlayers[options.playerName].points.monthlyMax = monthlyMax;

        let lastWinner = this.history[dateInfo.historyDateString].dailyWinner;
        if (lastWinner != dailyWinner) {
            if (dailyWinner == "Keiner" && lastWinner != "Keiner") {
                this.addToEventLog("Der Tagessieg von " + common.HTMLBold(lastWinner) + " am " + common.HTMLBold(dateInfo.historyDateString) + " ist wieder frei!");
            }
            if (dailyWinner != "Keiner" && lastWinner == "Keiner") {
                this.addToEventLog("Der Tagessieg am " + common.HTMLBold(dateInfo.historyDateString) + " geht bis jetzt an " + common.HTMLBold(dailyWinner));
            }
            else if (dailyWinner != "Keiner" && lastWinner != "Keiner") {
                this.addToEventLog("Der Tagessieg von " + common.HTMLBold(lastWinner) + " am " + common.HTMLBold(dateInfo.historyDateString) + " geht nun an " + common.HTMLBold(dailyWinner));
            }

        }
        this.history[dateInfo.historyDateString].dailyWinner = dailyWinner;
        if (this.dailyWins[dailyWinner] != undefined) {
            this.dailyWins[dailyWinner]++;

        }
        else {
            this.dailyWins[dailyWinner] = 1;
        }

        if (lastWinner != "Keiner" && lastWinner != undefined) {
            this.dailyWins[lastWinner]--;
        }


        // MONTHLY WINS
        max = 100;
        var monthlyWinner = "Keiner";
        this.monthlyWins[options.playerName] = 0;
        for (let date in this.monthlyData) {
            if (date == dateInfo.currentMonthName) {
                break;
            }
            max = 0;
            for (let playerName in this.registeredPlayers) {
                if (this.monthlyData[date][playerName] > max) {
                    max = this.monthlyData[date][playerName];
                    monthlyWinner = playerName;
                }
                if (this.monthlyWins[playerName] == undefined) {
                    this.monthlyWins[playerName] = 0;
                }



            }

            this.monthlyWins[monthlyWinner]++;

        }





        let maxExerciseCountDaily = 0;
        for (let date in this.dailyDataExercise) {
            try {
                if (this.dailyDataExercise[date][options.exerciseId][options.playerName] > maxExerciseCountDaily) {
                    maxExerciseCountDaily = this.dailyDataExercise[date][options.exerciseId][options.playerName];
                }
            }
            catch (e) {

            }

        }

        let maxExerciseCountMonthly = 0;
        for (let date in this.monthlyDataExercise) {
            try {
                if (this.monthlyDataExercise[date][options.exerciseId][options.playerName] > maxExerciseCountMonthly) {
                    maxExerciseCountMonthly = this.monthlyDataExercise[date][options.exerciseId][options.playerName];
                }
            }
            catch (e) {

            }
        }

        let maxExerciseCountDailyCategory = 0;
        for (let date in this.dailyDataExerciseCategory) {
            try {
                if (this.dailyDataExerciseCategory[date][options.exerciseCategory][options.playerName] > maxExerciseCountDailyCategory) {
                    maxExerciseCountDailyCategory = this.dailyDataExerciseCategory[date][options.exerciseCategory][options.playerName];
                }
            }
            catch (e) {

            }
        }

        let maxExerciseCountMonthlyCategory = 0;
        for (let date in this.monthlyDataExerciseCategory) {
            try {
                if (this.monthlyDataExerciseCategory[date][options.exerciseCategory][options.playerName] > maxExerciseCountMonthlyCategory) {
                    maxExerciseCountMonthly = this.monthlyDataExerciseCategory[date][options.exerciseCategory][options.playerName];
                }
            }
            catch (e) {

            }
        }



        if (this.maxExerciseCounts[options.exerciseId] == undefined) {
            this.maxExerciseCounts[options.exerciseId] = {};
            this.maxExerciseCounts[options.exerciseId].daily = {};
            this.maxExerciseCounts[options.exerciseId].monthly = {};
            this.maxExerciseCounts[options.exerciseId].overall = {};

            this.maxExerciseCounts[options.exerciseId].daily[options.playerName] = this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId][options.playerName];
            this.maxExerciseCounts[options.exerciseId].monthly[options.playerName] = this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId][options.playerName];
            this.maxExerciseCounts[options.exerciseId].overall[options.playerName] = Number(options.exerciseCount);
        }
        else {
            if (this.maxExerciseCounts[options.exerciseId].daily[options.playerName] == undefined) {
                this.maxExerciseCounts[options.exerciseId].daily[options.playerName] = this.dailyDataExercise[dateInfo.historyDateString][options.exerciseId][options.playerName];
            }
            else {

                this.maxExerciseCounts[options.exerciseId].daily[options.playerName] = maxExerciseCountDaily;

            }

            if (this.maxExerciseCounts[options.exerciseId].monthly[options.playerName] == undefined) {
                this.maxExerciseCounts[options.exerciseId].monthly[options.playerName] = this.monthlyDataExercise[dateInfo.currentMonthName][options.exerciseId][options.playerName];
            }
            else {
                this.maxExerciseCounts[options.exerciseId].monthly[options.playerName] = maxExerciseCountMonthly;
            }


            if (this.maxExerciseCounts[options.exerciseId].overall[options.playerName] == undefined) {
                this.maxExerciseCounts[options.exerciseId].overall[options.playerName] = Number(options.exerciseCount);
            }
            else {
                this.maxExerciseCounts[options.exerciseId].overall[options.playerName] += Number(options.exerciseCount);
            }
        }

        //category
        if (this.maxExerciseCountsCategory[options.exerciseCategory] == undefined) {
            this.maxExerciseCountsCategory[options.exerciseCategory] = {};
            this.maxExerciseCountsCategory[options.exerciseCategory].daily = {};
            this.maxExerciseCountsCategory[options.exerciseCategory].monthly = {};
            this.maxExerciseCountsCategory[options.exerciseCategory].overall = {};

            this.maxExerciseCountsCategory[options.exerciseCategory].daily[options.playerName] = this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory][options.playerName];
            this.maxExerciseCountsCategory[options.exerciseCategory].monthly[options.playerName] = this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory][options.playerName];
            this.maxExerciseCountsCategory[options.exerciseCategory].overall[options.playerName] = Number(options.exerciseCount);
        }
        else {
            if (this.maxExerciseCountsCategory[options.exerciseCategory].daily[options.playerName] == undefined) {
                this.maxExerciseCountsCategory[options.exerciseCategory].daily[options.playerName] = this.dailyDataExerciseCategory[dateInfo.historyDateString][options.exerciseCategory][options.playerName];
            }
            else {

                this.maxExerciseCountsCategory[options.exerciseCategory].daily[options.playerName] = maxExerciseCountDailyCategory;

            }

            if (this.maxExerciseCountsCategory[options.exerciseCategory].monthly[options.playerName] == undefined) {
                this.maxExerciseCountsCategory[options.exerciseCategory].monthly[options.playerName] = this.monthlyDataExerciseCategory[dateInfo.currentMonthName][options.exerciseCategory][options.playerName];
            }
            else {

                this.maxExerciseCountsCategory[options.exerciseCategory].monthly[options.playerName] = maxExerciseCountMonthlyCategory;

            }


            if (this.maxExerciseCountsCategory[options.exerciseCategory].overall[options.playerName] == undefined) {
                this.maxExerciseCountsCategory[options.exerciseCategory].overall[options.playerName] = Number(options.exerciseCount);
            }
            else {
                this.maxExerciseCountsCategory[options.exerciseCategory].overall[options.playerName] += Number(options.exerciseCount);
            }
        }

        let end = Date.now();
        updateSingleStatsResult(`updateSingleStatsResult took ${end - start} ms`);



    }

  